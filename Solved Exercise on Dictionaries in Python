#a(simple dictionary)
person = {
    "name": "John Doe",
    "age": 30,
    "city": "New York",
    "hobbies": ["reading", "cycling", "traveling"]
}
#b(count the frequency of word)
from collections import Counter
import string

def count_word_frequency(text):
    # Remove punctuation from the text
    text = text.translate(str.maketrans('', '', string.punctuation))

    # Convert the text to lowercase and split it into words
    words = text.lower().split()

    # Count the frequency of each word using Counter
    word_count = Counter(words)

    return word_count

# Example text
text = "Hello world! Hello everyone. This is a test. Hello test world."

# Call the function and print the word frequencies
word_frequencies = count_word_frequency(text)
for word, count in word_frequencies.items():
    print(f"'{word}': {count}")
#c(Simple inventory system)
class InventorySystem:
    def __init__(self):
        # Initialize an empty inventory dictionary
        self.inventory = {}

    def add_item(self, item_name, quantity):
        """Add a new item or update the quantity of an existing item."""
        if item_name in self.inventory:
            self.inventory[item_name] += quantity
        else:
            self.inventory[item_name] = quantity
        print(f"Added {quantity} of '{item_name}' to the inventory.")

    def remove_item(self, item_name, quantity):
        """Remove a specified quantity of an item from the inventory."""
        if item_name in self.inventory:
            if self.inventory[item_name] >= quantity:
                self.inventory[item_name] -= quantity
                if self.inventory[item_name] == 0:
                    del self.inventory[item_name]
                print(f"Removed {quantity} of '{item_name}' from the inventory.")
            else:
                print(f"Error: Not enough {item_name} in inventory.")
        else:
            print(f"Error: '{item_name}' not found in inventory.")

    def view_inventory(self):
        """Display the current inventory."""
        if not self.inventory:
            print("Inventory is empty.")
        else:
            print("Current Inventory:")
            for item_name, quantity in self.inventory.items():
                print(f"{item_name}: {quantity}")

# Example usage
inventory = InventorySystem()

# Adding items to inventory
inventory.add_item("apple", 10)
inventory.add_item("banana", 5)
inventory.add_item("orange", 3)

# Viewing the inventory
inventory.view_inventory()

# Removing items from inventory
inventory.remove_item("banana", 2)

# Viewing the updated inventory
inventory.view_inventory()

# Trying to remove more items than available
inventory.remove_item("orange", 5)

# Viewing the final inventory
inventory.view_inventory()
#d(analyze a data set)
import pandas as pd

# Load the dataset
file_path = "customer_orders.csv"  # Replace with your file path
data = pd.read_csv(file_path)

# Inspect the dataset
print("Dataset preview:")
print(data.head())

# Ensure required columns exist
required_columns = ["OrderID", "Category", "Quantity"]
if not all(column in data.columns for column in required_columns):
    raise ValueError(f"Dataset must contain the following columns: {required_columns}")

# Group data by category and sum quantities
category_summary = data.groupby("Category")["Quantity"].sum().reset_index()

# Find the most popular category
most_popular = category_summary.loc[category_summary["Quantity"].idxmax()]

# Display results
print("\nCategory Summary:")
print(category_summary)
print(f"\nMost Popular Category: {most_popular['Category']} with {most_popular['Quantity']} items sold.")
#e(simple dictionary)
student_grades = {
    "Alice": 85,
    "Bob": 92,
    "Charlie": 78,
    "Diana": 88,
    "Evan": 90
}
#f(inventory management)
# Initialize the dictionary to store student grades
student_grades = {
    "Alice": 85,
    "Bob": 92,
    "Charlie": 78,
    "Diana": 88,
    "Evan": 90
}

# Calculate the average grade
total_grades = sum(student_grades.values())
num_students = len(student_grades)
average_grade = total_grades / num_students

# Display the grades and the average
print("Student Grades:")
for student, grade in student_grades.items():
    print(f"{student}: {grade}")

print(f"\nAverage Grade: {average_grade:.2f}")
#g(student gradebook)
# Initialize the product dictionary
products = {}

# Function to add a new product
def add_product(name, quantity, price):
    if name in products:
        print(f"Product '{name}' already exists. Use 'update_quantity' to modify it.")
    else:
        products[name] = {"quantity": quantity, "price": price}
        print(f"Product '{name}' added successfully.")

# Function to update product quantities
def update_quantity(name, quantity):
    if name in products:
        products[name]["quantity"] += quantity
        print(f"Quantity for '{name}' updated. New quantity: {products[name]['quantity']}.")
    else:
        print(f"Product '{name}' does not exist. Use 'add_product' to add it first.")

# Function to calculate total inventory value
def calculate_inventory_value():
    total_value = sum(info["quantity"] * info["price"] for info in products.values())
    return total_value

# Function to generate a report of low-stock items
def low_stock_report(threshold):
    low_stock = {name: info for name, info in products.items() if info["quantity"] <= threshold}
    if not low_stock:
        print("No low-stock items.")
    else:
        print("Low-stock items:")
        for name, info in low_stock.items():
            print(f"{name}: Quantity: {info['quantity']}, Price: {info['price']}")

# Example usage
add_product("Laptop", 10, 1000)
add_product("Smartphone", 5, 800)
add_product("Headphones", 2, 50)

update_quantity("Smartphone", 3)
update_quantity("Tablet", 10)  # Trying to update a non-existent product

print("\nTotal Inventory Value:", calculate_inventory_value())

print("\nLow-stock Report (Threshold: 3):")
low_stock_report(3)
